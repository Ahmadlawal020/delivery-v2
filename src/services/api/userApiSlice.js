import { createSelector, createEntityAdapter } from "@reduxjs/toolkit";
import { apiSlice } from "./apiSlice";

// Create an entity adapter for users
const usersAdapter = createEntityAdapter({});

// Define the initial state using the adapter
const initialState = usersAdapter.getInitialState();

// Inject endpoints into the API slice
export const usersApiSlice = apiSlice.injectEndpoints({
  endpoints: (builder) => ({
    // Query to fetch all users
    getUsers: builder.query({
      query: () => ({
        url: "/api/users",
        validateStatus: (response, result) => {
          return response.status === 200 && !result.isError;
        },
      }),
      transformResponse: (responseData) => {
        // Transform the response data to match the entity adapter format
        const loadedUsers = responseData.map((user) => {
          user.id = user._id; // Map MongoDB `_id` to `id` for Redux
          return user;
        });
        return usersAdapter.setAll(initialState, loadedUsers);
      },
      providesTags: (result, error, arg) => {
        // Provide tags for caching and invalidation
        if (result?.ids) {
          return [
            { type: "User", id: "LIST" },
            ...result.ids.map((id) => ({ type: "User", id })),
          ];
        } else {
          return [{ type: "User", id: "LIST" }];
        }
      },
    }),

    // Mutation to add a new user
    addNewUser: builder.mutation({
      query: (initialUserData) => ({
        url: "/api/users",
        method: "POST",
        body: {
          ...initialUserData,
        },
      }),
      invalidatesTags: [
        { type: "User", id: "LIST" }, // Invalidate the user list cache
      ],
    }),
    updateBalance: builder.mutation({
      query: (balanceData) => ({
        url: "/api/users/balance",
        method: "PATCH",
        body: balanceData,
      }),
      invalidatesTags: ["User"], // Invalidate the user cache
    }),

    // Mutation to update a user
    updateUser: builder.mutation({
      query: (initialUserData) => ({
        url: "/api/users",
        method: "PATCH",
        body: {
          ...initialUserData,
        },
      }),
      invalidatesTags: (result, error, arg) => [
        { type: "User", id: arg.id }, // Invalidate the cache for the updated user
      ],
    }),

    // Mutation to delete a user
    deleteUser: builder.mutation({
      query: ({ id }) => ({
        url: "/api/users",
        method: "DELETE",
        body: { id },
      }),
      invalidatesTags: (result, error, arg) => [
        { type: "User", id: arg.id }, // Invalidate the cache for the deleted user
      ],
    }),
  }),
});

// Export hooks for using the endpoints in components
export const {
  useGetUsersQuery,
  useAddNewUserMutation,
  useUpdateUserMutation,
  useUpdateBalanceMutation,
  useDeleteUserMutation,
} = usersApiSlice;

// Select the result of the `getUsers` query
export const selectUsersResult = usersApiSlice.endpoints.getUsers.select();

// Create a memoized selector for the users data
const selectUsersData = createSelector(
  selectUsersResult,
  (usersResult) => usersResult.data // Normalized state object with ids & entities
);

// Export selectors generated by the entity adapter
export const {
  selectAll: selectAllUsers,
  selectById: selectUserById,
  selectIds: selectUserIds,
} = usersAdapter.getSelectors(
  (state) => selectUsersData(state) ?? initialState
);
